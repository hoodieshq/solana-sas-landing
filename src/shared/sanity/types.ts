/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: 'sanity.imagePaletteSwatch'
    background?: string
    foreground?: string
    population?: number
    title?: string
}

export type SanityImagePalette = {
    _type: 'sanity.imagePalette'
    darkMuted?: SanityImagePaletteSwatch
    lightVibrant?: SanityImagePaletteSwatch
    darkVibrant?: SanityImagePaletteSwatch
    vibrant?: SanityImagePaletteSwatch
    dominant?: SanityImagePaletteSwatch
    lightMuted?: SanityImagePaletteSwatch
    muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
    _type: 'sanity.imageDimensions'
    height?: number
    width?: number
    aspectRatio?: number
}

export type SanityFileAsset = {
    _id: string
    _type: 'sanity.fileAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    source?: SanityAssetSourceData
}

export type Geopoint = {
    _type: 'geopoint'
    lat?: number
    lng?: number
    alt?: number
}

export type Settings = {
    _id: string
    _type: 'settings'
    _createdAt: string
    _updatedAt: string
    _rev: string
    topNavigation?: TopNavigation
    bottomNavigation?: BottomNavigation
}

export type Home = {
    _id: string
    _type: 'home'
    _createdAt: string
    _updatedAt: string
    _rev: string
    content?: Array<
        | ({
              _key: string
          } & Hero)
        | {
              title?: string
              docsLinkTitle?: string
              docsLink?: Link
              content?: Array<
                  {
                      _key: string
                  } & Testimonial
              >
              _type: 'testimonials'
              _key: string
          }
        | {
              title?: string
              docsLinkTitle?: string
              docsLink?: Link
              content?: Array<
                  {
                      _key: string
                  } & Step
              >
              _type: 'steps'
              _key: string
          }
        | {
              title?: string
              docsLinkTitle?: string
              docsLink?: Link
              mode?: 'latest' | 'specific'
              latestAmount?: number
              references?: Array<{
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  _key: string
                  [internalGroqTypeReferenceTo]?: 'use-case'
              }>
              _type: 'use-cases'
              _key: string
          }
        | ({
              _key: string
          } & Quote)
        | {
              title?: string
              docsLinkTitle?: string
              docsLink?: Link
              content?: Array<
                  {
                      _key: string
                  } & CodeFile
              >
              _type: 'code-examples'
              _key: string
          }
        | {
              title?: string
              docsLinkTitle?: string
              docsLink?: Link
              mode?: 'latest' | 'specific'
              latestAmount?: number
              references?: Array<{
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  _key: string
                  [internalGroqTypeReferenceTo]?: 'guide'
              }>
              _type: 'guides'
              _key: string
          }
    >
}

export type Guides = {
    _id: string
    _type: 'guides'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    docsLinkTitle?: string
    docsLink?: Link
    mode?: 'latest' | 'specific'
    latestAmount?: number
    references?: Array<{
        _ref: string
        _type: 'reference'
        _weak?: boolean
        _key: string
        [internalGroqTypeReferenceTo]?: 'guide'
    }>
}

export type UseCases = {
    _id: string
    _type: 'use-cases'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    docsLinkTitle?: string
    docsLink?: Link
    mode?: 'latest' | 'specific'
    latestAmount?: number
    references?: Array<{
        _ref: string
        _type: 'reference'
        _weak?: boolean
        _key: string
        [internalGroqTypeReferenceTo]?: 'use-case'
    }>
}

export type CodeExamples = {
    _id: string
    _type: 'code-examples'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    docsLinkTitle?: string
    docsLink?: Link
    content?: Array<
        {
            _key: string
        } & CodeFile
    >
}

export type CodeFile = {
    _type: 'code-file'
    name?: string
    type?:
        | 'abap'
        | 'actionscript-3'
        | 'ada'
        | 'adoc'
        | 'angular-html'
        | 'angular-ts'
        | 'apache'
        | 'apex'
        | 'apl'
        | 'applescript'
        | 'ara'
        | 'asciidoc'
        | 'asm'
        | 'astro'
        | 'awk'
        | 'ballerina'
        | 'bash'
        | 'batQuote'
        | 'batch'
        | 'be'
        | 'beancount'
        | 'berry'
        | 'bibtex'
        | 'bicep'
        | 'blade'
        | 'bsl'
        | 'c'
        | 'c#'
        | 'c++'
        | 'cadence'
        | 'cairo'
        | 'cdc'
        | 'clarity'
        | 'clj'
        | 'clojure'
        | 'closure-templates'
        | 'cmake'
        | 'cmd'
        | 'cobol'
        | 'codeowners'
        | 'codeql'
        | 'coffee'
        | 'coffeescript'
        | 'common-lisp'
        | 'console'
        | 'coq'
        | 'cpp'
        | 'cql'
        | 'crystal'
        | 'cs'
        | 'csharp'
        | 'css'
        | 'csv'
        | 'cue'
        | 'cypher'
        | 'd'
        | 'dart'
        | 'dax'
        | 'desktop'
        | 'diff'
        | 'docker'
        | 'dockerfile'
        | 'dotenv'
        | 'dream-maker'
        | 'edge'
        | 'elisp'
        | 'elixir'
        | 'elm'
        | 'emacs-lisp'
        | 'erb'
        | 'erl'
        | 'erlang'
        | 'f'
        | 'f#'
        | 'f03'
        | 'f08'
        | 'f18'
        | 'f77'
        | 'f90'
        | 'f95'
        | 'fennel'
        | 'fish'
        | 'fluent'
        | 'for'
        | 'fortran-fixed-form'
        | 'fortran-free-form'
        | 'fs'
        | 'fsharp'
        | 'fsl'
        | 'ftl'
        | 'gdresource'
        | 'gdscript'
        | 'gdshader'
        | 'genie'
        | 'gherkin'
        | 'git-commit'
        | 'git-rebase'
        | 'gjs'
        | 'gleam'
        | 'glimmer-js'
        | 'glimmer-ts'
        | 'glsl'
        | 'gnuplot'
        | 'go'
        | 'gql'
        | 'graphql'
        | 'groovy'
        | 'gts'
        | 'hack'
        | 'haml'
        | 'handlebars'
        | 'haskell'
        | 'haxe'
        | 'hbs'
        | 'hcl'
        | 'hjson'
        | 'hlsl'
        | 'hs'
        | 'html'
        | 'html-derivative'
        | 'http'
        | 'hxml'
        | 'hy'
        | 'imba'
        | 'ini'
        | 'jade'
        | 'java'
        | 'javascript'
        | 'jinja'
        | 'jison'
        | 'jl'
        | 'js'
        | 'json'
        | 'json5'
        | 'jsonc'
        | 'jsonl'
        | 'jsonnet'
        | 'jssm'
        | 'jsx'
        | 'julia'
        | 'kotlin'
        | 'kql'
        | 'kt'
        | 'kts'
        | 'kusto'
        | 'latex'
        | 'lean'
        | 'lean4'
        | 'less'
        | 'liquid'
        | 'lisp'
        | 'lit'
        | 'llvm'
        | 'log'
        | 'logo'
        | 'lua'
        | 'luau'
        | 'make'
        | 'makefile'
        | 'markdown'
        | 'marko'
        | 'matlab'
        | 'md'
        | 'mdc'
        | 'mdx'
        | 'mediawiki'
        | 'mermaid'
        | 'mips'
        | 'mipsasm'
        | 'mmd'
        | 'mojo'
        | 'move'
        | 'nar'
        | 'narrat'
        | 'nextflow'
        | 'nf'
        | 'nginx'
        | 'nim'
        | 'nix'
        | 'nu'
        | 'nushell'
        | 'objc'
        | 'objective-c'
        | 'objective-cpp'
        | 'ocaml'
        | 'pascal'
        | 'perl'
        | 'perl6'
        | 'php'
        | 'plsql'
        | 'po'
        | 'polar'
        | 'postcss'
        | 'pot'
        | 'potx'
        | 'powerquery'
        | 'powershell'
        | 'prisma'
        | 'prolog'
        | 'properties'
        | 'proto'
        | 'protobuf'
        | 'ps'
        | 'ps1'
        | 'pug'
        | 'puppet'
        | 'purescript'
        | 'py'
        | 'python'
        | 'ql'
        | 'qml'
        | 'qmldir'
        | 'qss'
        | 'r'
        | 'racket'
        | 'raku'
        | 'razor'
        | 'rb'
        | 'reg'
        | 'regex'
        | 'regexp'
        | 'rel'
        | 'riscv'
        | 'rs'
        | 'rst'
        | 'ruby'
        | 'rust'
        | 'sas'
        | 'sass'
        | 'scala'
        | 'scheme'
        | 'scss'
        | 'sdbl'
        | 'sh'
        | 'shader'
        | 'shaderlab'
        | 'shell'
        | 'shellscript'
        | 'shellsession'
        | 'smalltalk'
        | 'solidity'
        | 'soy'
        | 'sparql'
        | 'spl'
        | 'splunk'
        | 'sql'
        | 'ssh-config'
        | 'stata'
        | 'styl'
        | 'stylus'
        | 'svelte'
        | 'swift'
        | 'system-verilog'
        | 'systemd'
        | 'talon'
        | 'talonscript'
        | 'tasl'
        | 'tcl'
        | 'templ'
        | 'terraform'
        | 'tex'
        | 'tf'
        | 'tfvars'
        | 'toml'
        | 'ts'
        | 'ts-tags'
        | 'tsp'
        | 'tsv'
        | 'tsx'
        | 'turtle'
        | 'twig'
        | 'typ'
        | 'typescript'
        | 'typespec'
        | 'typst'
        | 'v'
        | 'vala'
        | 'vb'
        | 'verilog'
        | 'vhdl'
        | 'vim'
        | 'viml'
        | 'vimscript'
        | 'vue'
        | 'vue-html'
        | 'vy'
        | 'vyper'
        | 'wasm'
        | 'wenyan'
        | 'wgsl'
        | 'wiki'
        | 'wikitext'
        | 'wit'
        | 'wl'
        | 'wolfram'
        | 'xml'
        | 'xsl'
        | 'yaml'
        | 'yml'
        | 'zenscript'
        | 'zig'
        | 'zsh'
    code?: string
}

export type Quote = {
    _type: 'quote'
    logo?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    name?: string
    testimonial?: string
}

export type Steps = {
    _id: string
    _type: 'steps'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    docsLinkTitle?: string
    docsLink?: Link
    content?: Array<
        {
            _key: string
        } & Step
    >
}

export type Step = {
    _type: 'step'
    title?: string
    description?: string
}

export type Testimonials = {
    _id: string
    _type: 'testimonials'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    docsLinkTitle?: string
    docsLink?: Link
    content?: Array<
        {
            _key: string
        } & Testimonial
    >
}

export type Testimonial = {
    _type: 'testimonial'
    logo?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    name?: string
    layout?: 'small' | 'medium' | 'large'
    testimonial?: string
}

export type Hero = {
    _type: 'hero'
    title?: string
    content?: string
    links?: Array<
        {
            _key: string
        } & ButtonLink
    >
}

export type RichText = Array<
    | ({
          _key: string
      } & CodeFile)
    | {
          asset?: {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
          }
          media?: unknown
          hotspot?: SanityImageHotspot
          crop?: SanityImageCrop
          _type: 'image'
          _key: string
      }
    | {
          children?: Array<{
              marks?: Array<string>
              text?: string
              _type: 'span'
              _key: string
          }>
          style?: 'h2' | 'h3' | 'h4' | 'normal'
          listItem?: 'bullet'
          markDefs?: Array<{
              href?: string
              _type: 'link'
              _key: string
          }>
          level?: number
          _type: 'block'
          _key: string
      }
>

export type DocReference = {
    _type: 'doc-reference'
    title?: string
    url?: Link
}

export type ButtonLink = {
    _type: 'button-link'
    title?: string
    url?: Link
    variant?: 'primary' | 'secondary'
    icon?: 'copy' | 'documentation' | 'github'
    newWindow?: boolean
}

export type TextLink = {
    _type: 'text-link'
    title?: string
    link?: Link
    newWindow?: boolean
}

export type Link = {
    _type: 'link'
    mode?: 'external' | 'home' | 'guide-list' | 'guide' | 'use-case-list' | 'use-case'
    url?: string
    guide?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'guide'
    }
    useCase?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'use-case'
    }
}

export type UseCase = {
    _id: string
    _type: 'use-case'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    slug?: Slug
    publishedAt?: string
    description?: string
    cover?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    content?: RichText
    related?: Array<{
        _ref: string
        _type: 'reference'
        _weak?: boolean
        _key: string
        [internalGroqTypeReferenceTo]?: 'use-case'
    }>
}

export type Guide = {
    _id: string
    _type: 'guide'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    slug?: Slug
    publishedAt?: string
    description?: string
    cover?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    content?: RichText
    related?: Array<{
        _ref: string
        _type: 'reference'
        _weak?: boolean
        _key: string
        [internalGroqTypeReferenceTo]?: 'guide'
    }>
}

export type SanityImageCrop = {
    _type: 'sanity.imageCrop'
    top?: number
    bottom?: number
    left?: number
    right?: number
}

export type SanityImageHotspot = {
    _type: 'sanity.imageHotspot'
    x?: number
    y?: number
    height?: number
    width?: number
}

export type SanityImageAsset = {
    _id: string
    _type: 'sanity.imageAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    metadata?: SanityImageMetadata
    source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
    _type: 'sanity.assetSourceData'
    name?: string
    id?: string
    url?: string
}

export type SanityImageMetadata = {
    _type: 'sanity.imageMetadata'
    location?: Geopoint
    dimensions?: SanityImageDimensions
    palette?: SanityImagePalette
    lqip?: string
    blurHash?: string
    hasAlpha?: boolean
    isOpaque?: boolean
}

export type Slug = {
    _type: 'slug'
    current?: string
    source?: string
}

export type BottomNavigationGroup = {
    _type: 'bottom-navigation-group'
    title?: string
    items?: Array<
        {
            _key: string
        } & TextLink
    >
}

export type BottomNavigation = {
    _type: 'bottom-navigation'
    groups?: Array<
        {
            _key: string
        } & BottomNavigationGroup
    >
}

export type TopNavigation = {
    _type: 'top-navigation'
    items?: Array<
        {
            _key: string
        } & TextLink
    >
    aside?: Array<
        {
            _key: string
        } & ButtonLink
    >
}

export type AllSanitySchemaTypes =
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | SanityFileAsset
    | Geopoint
    | Settings
    | Home
    | Guides
    | UseCases
    | CodeExamples
    | CodeFile
    | Quote
    | Steps
    | Step
    | Testimonials
    | Testimonial
    | Hero
    | RichText
    | DocReference
    | ButtonLink
    | TextLink
    | Link
    | UseCase
    | Guide
    | SanityImageCrop
    | SanityImageHotspot
    | SanityImageAsset
    | SanityAssetSourceData
    | SanityImageMetadata
    | Slug
    | BottomNavigationGroup
    | BottomNavigation
    | TopNavigation
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/shared/sanity/queries/posts.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)][0...12]{  _id, title, slug}
export type POSTS_QUERYResult = Array<never>

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
    interface SanityQueries {
        '*[_type == "post" && defined(slug.current)][0...12]{\n  _id, title, slug\n}': POSTS_QUERYResult
    }
}
